<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>New_Wrold</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-04-06T05:21:05.647Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>YJH143</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>BZOJ1597</title>
    <link href="http://yoursite.com/2018/04/06/BZOJ1597/"/>
    <id>http://yoursite.com/2018/04/06/BZOJ1597/</id>
    <published>2018-04-06T04:56:01.000Z</published>
    <updated>2018-04-06T05:21:05.647Z</updated>
    
    <content type="html"><![CDATA[<p>题目大意：</p><p>​    $Jono$要买$n$块土地，每块土地有长和宽，每块土地的价钱为$h <em> w$，现在可以分组买，每一组的花费为这一组地最大长乘最大宽，例如买两块土地$3 </em> 5$和$5 <em> 3$的那么花费就为$5 </em> 5 = 25$，问你买$n$块土地的最小花费是多少。</p><p>$(1 &lt;= N &lt;= 50,000)，(1 &lt;= 宽 &lt;= 1,000,000; 1 &lt;= 长 &lt;= 1,000,000). $</p><p>解题思路：</p><p>​    我们可以发现对于土地$A, B$， 如果$A.h &lt; B.h$  $and $ $A.w &lt; B.y$那么$A$这块土地是可以忽略的，那么我们现在就可以把这些土地处理成$h$升序， $w$降序的顺序，然后就可以$dp$了，显然的转移方程式为$dp[i] = min(dp[j] + y[j +1] <em> x[i])(1 &lt; j &lt; i)$  但复杂度是$O(n </em> n)$的是不能接受的，那么我们考虑$j, k(j &lt; k)$两个位置转移谁更优$dp[j] + y[j + 1] <em> x[i] &lt; dp[k] + y[k +1] </em> x[i]$ 移项整理得$(dp[j] - dp[k]) / (y[k +1] - y[j +1]) &lt; x[i]$ 那么就可以进行斜率优化了。</p><p>代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MaxN = <span class="number">5e4</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> LL;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">NODE</span> &#123;</span></span><br><span class="line">    LL x, y;</span><br><span class="line">&#125;;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Cal</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, NODE *A, LL *f)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="number">1.0</span> * (f[b] - f[a]) / (<span class="number">1.0</span> * (A[a + <span class="number">1</span>].y - A[b + <span class="number">1</span>].y)));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(NODE A, NODE B)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(A.x == B.x) <span class="keyword">return</span> A.y &lt; B.y;</span><br><span class="line">    <span class="keyword">return</span> A.x &lt; B.x;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    NODE *A = <span class="keyword">new</span> NODE[n + <span class="number">1</span>], *B = <span class="keyword">new</span> NODE[n + <span class="number">1</span>]; <span class="keyword">int</span> tot = <span class="number">0</span>;</span><br><span class="line">    LL *f = <span class="keyword">new</span> LL[n + <span class="number">1</span>]; <span class="keyword">int</span> *seq = <span class="keyword">new</span> <span class="keyword">int</span>[n + <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%lld%lld"</span>, &amp;A[i].x, &amp;A[i].y);</span><br><span class="line">    &#125;</span><br><span class="line">    sort (A + <span class="number">1</span>, A + n + <span class="number">1</span>, cmp);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span>(tot &gt; <span class="number">0</span> &amp;&amp; B[tot].y &lt;= A[i].y) tot--;</span><br><span class="line">        B[++tot] = A[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> head = <span class="number">1</span>, tail = <span class="number">1</span>; seq[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tot; i++) &#123;</span><br><span class="line">        <span class="keyword">while</span>(head &lt; tail &amp;&amp; Cal(seq[head], seq[head + <span class="number">1</span>], B, f) &lt; B[i].x) head++;</span><br><span class="line">        <span class="keyword">int</span> t = seq[head];</span><br><span class="line">        f[i] = f[t] + B[t + <span class="number">1</span>].y * B[i].x;</span><br><span class="line">        <span class="keyword">while</span>(tail &gt; head &amp;&amp; Cal(seq[tail], i, B, f) &lt; Cal(seq[tail - <span class="number">1</span>], seq[tail], B, f)) tail--;</span><br><span class="line">        seq[++tail] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>, f[tot]);</span><br><span class="line">    <span class="keyword">delete</span> [] A;</span><br><span class="line">    <span class="keyword">delete</span> [] B;</span><br><span class="line">    <span class="keyword">delete</span> [] seq;</span><br><span class="line">    <span class="keyword">delete</span> [] f;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目大意：&lt;/p&gt;
&lt;p&gt;​    $Jono$要买$n$块土地，每块土地有长和宽，每块土地的价钱为$h &lt;em&gt; w$，现在可以分组买，每一组的花费为这一组地最大长乘最大宽，例如买两块土地$3 &lt;/em&gt; 5$和$5 &lt;em&gt; 3$的那么花费就为$5 &lt;/em&gt; 5 = 
      
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
    
      <category term="dp" scheme="http://yoursite.com/tags/dp/"/>
    
  </entry>
  
  <entry>
    <title>bzoj2216</title>
    <link href="http://yoursite.com/2018/04/05/bzoj2216/"/>
    <id>http://yoursite.com/2018/04/05/bzoj2216/</id>
    <published>2018-04-05T15:30:51.000Z</published>
    <updated>2018-04-05T16:35:47.711Z</updated>
    
    <content type="html"><![CDATA[<p>题目大意：</p><p>已知一个长度为$n的序列a1,a2,…,an。$<br>对于每个$1&lt;=i&lt;=n$，找到最小的非负整数$p$满足 对于任意的$j, a_j &lt; = a_i + p - sqrt(abs(i-j))$</p><p>$（n &lt;= 50000, 0 &lt;= a_i &lt;= 1000000000)$</p><p>解题思路：</p><p>​    我们把不等式移项可得：$a_j - a_i + sqrt(abs(i - j)) &lt;= p。$  由于$a_i$是不变的，那么实质上就是求$a_j + sqrt(abs(i - j))$</p><p>​    对于这个试子我们可以分情况讨论去掉绝对值：</p><p>第一种：$j &lt; i$    令$ res = a_j + sqrt(i - j);$</p><p>那么对于这种情况我们会发现对于$k$这个位置我们需要在$[L,k - 1]$之间找一个位置使$res$最大，假如我们在$j$这个位置取得了最大值，那么对于区间$[1,k - 1]$的这些数的使$res$最大的位置是不可能出现在$j$这个位置后面的，因为$sqrt(x) - sqrt(x - 1) &gt; sqrt(x + 1) - sqrt(x)$的，所以$[j, k - 1]$这些数是不可能取到$j$之后的数的，同理$[k +1, R]$这个区间的数是不用取$j$之前的数的，$[1, j]$的数也取不到因为现在保证的是$(j &lt; i)$ 也就是每个数只能取前面的数来使$res$最大。</p><p>第二种：$j &gt; i  $</p><p>这个很容易发现和第一种是一样的。所以只需正着倒着各做一遍就好了。</p><p>这个时候我们就可以整体二分了。</p><p>代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MaxN = <span class="number">5e5</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">int</span> n; </span><br><span class="line"><span class="keyword">double</span> f[MaxN + <span class="number">5</span>], g[MaxN + <span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> a[MaxN + <span class="number">5</span>];</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">Cal</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">double</span>)a[i] + <span class="built_in">sqrt</span>((<span class="keyword">double</span>)(j - i));</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Solve</span><span class="params">(<span class="keyword">double</span> *t, <span class="keyword">int</span> l, <span class="keyword">int</span> r, <span class="keyword">int</span> L, <span class="keyword">int</span> R)</span> </span>&#123;<span class="comment">// L, R表示决策枚举区间</span></span><br><span class="line">    <span class="keyword">if</span>(l &gt; r || L &gt; R) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">int</span> mid = (l + r) &gt;&gt; <span class="number">1</span>, pos = <span class="number">0</span>; </span><br><span class="line">    <span class="keyword">double</span> Max = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = L; i &lt;= R &amp;&amp; i &lt;= mid; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(Cal(i, mid) &gt; Max) &#123;</span><br><span class="line">            Max = Cal(i, mid);</span><br><span class="line">            pos = i;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    t[mid] = Max;</span><br><span class="line">    Solve(t, l, mid - <span class="number">1</span>, L, pos);</span><br><span class="line">    Solve(t, mid + <span class="number">1</span>, r, pos, R);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) <span class="built_in">scanf</span>(<span class="string">"%d"</span>, a + i);</span><br><span class="line">    Solve(f, <span class="number">1</span>, n, <span class="number">1</span>, n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n / <span class="number">2</span>; i++) swap(a[i], a[n - i + <span class="number">1</span>]);</span><br><span class="line">    Solve(g, <span class="number">1</span>, n, <span class="number">1</span>, n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, (<span class="keyword">int</span>)<span class="built_in">ceil</span>(max(f[i], g[n - i + <span class="number">1</span>]) - a[n - i + <span class="number">1</span>]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目大意：&lt;/p&gt;
&lt;p&gt;已知一个长度为$n的序列a1,a2,…,an。$&lt;br&gt;对于每个$1&amp;lt;=i&amp;lt;=n$，找到最小的非负整数$p$满足 对于任意的$j, a_j &amp;lt; = a_i + p - sqrt(abs(i-j))$&lt;/p&gt;
&lt;p&gt;$（n &amp;lt;
      
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
    
      <category term="null" scheme="http://yoursite.com/tags/null/"/>
    
  </entry>
  
  <entry>
    <title>BZOJ1098</title>
    <link href="http://yoursite.com/2018/03/28/BZOJ1098/"/>
    <id>http://yoursite.com/2018/03/28/BZOJ1098/</id>
    <published>2018-03-28T15:23:22.000Z</published>
    <updated>2018-03-29T13:22:17.553Z</updated>
    
    <content type="html"><![CDATA[<p>题目大意：</p><p>​    有个公司有$n$个员工，$m$个关系表示$A$ 和 $B$ 彼此有电话号码，现在公司想把这些员工分到尽可能多的地方，而且要每个地方的员工都能与其他位置的员工保持联系所以他们必须有彼此的电话号，问最多能分到几个位置，每个位置多少人。 $(n &lt;= 100000 , m &lt;= 2000000)$</p><p>解题思路：</p><p>​    题目中给出了$m$个关系表示$A$ 和 $B$ 彼此有电话号码，那么很容易看出这些关系可以构成一个图，图中有连边的两个人就可以放到不同的位置，那么就很容易在这个图的补图中， 连边就表示两个人必须在同一个位置，那么题目就转化成求补图中有多少个联通块，每块的大小是多少。由于$n$的范围很大，所以这个算法是不行的。那么我们现在就可以考虑枚举第$i$个人，没有与第$i$个人相连的其他人在原图的补图中肯定是要和第$i$个人在同一个联通块里面的，这里我们就可以$BFS$，将那些人塞到队列里面继续做。然后我们可以不在枚举已经确定的人，这个可以用链表维护。复杂度是$(n + m)$的.</p><p>代码如下：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MaxN = <span class="number">2e5</span>, MaxV = <span class="number">4e6</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n, m, tot;</span><br><span class="line"><span class="keyword">int</span> nxt[MaxN + <span class="number">5</span>], last[MaxN + <span class="number">5</span>];</span><br><span class="line"><span class="built_in">queue</span> &lt;<span class="keyword">int</span>&gt; que;</span><br><span class="line"><span class="keyword">bool</span> vis[MaxN + <span class="number">5</span>], co[MaxN + <span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> seq[MaxN + <span class="number">5</span>];</span><br><span class="line"><span class="keyword">int</span> Last[MaxN + <span class="number">5</span>], pre[MaxV + <span class="number">5</span>], other[MaxV + <span class="number">5</span>], all;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">read</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> x=<span class="number">0</span>,f=<span class="number">1</span>;<span class="keyword">char</span> ch=getchar();</span><br><span class="line"><span class="keyword">while</span>(ch&lt;<span class="string">'0'</span>||ch&gt;<span class="string">'9'</span>)&#123;<span class="keyword">if</span>(ch==<span class="string">'-'</span>)f=<span class="number">-1</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">while</span>(ch&gt;=<span class="string">'0'</span>&amp;&amp;ch&lt;=<span class="string">'9'</span>)&#123;x=x*<span class="number">10</span>+ch-<span class="string">'0'</span>;ch=getchar();&#125;</span><br><span class="line"><span class="keyword">return</span> x*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">Del</span><span class="params">(<span class="keyword">int</span> x)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">nxt[last[x]] = nxt[x];</span><br><span class="line">last[nxt[x]] = last[x];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> v)</span> </span>&#123;</span><br><span class="line">pre[++all] = Last[u];</span><br><span class="line">Last[u] = all;</span><br><span class="line">other[all] = v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Bfs</span><span class="params">(<span class="keyword">int</span> x)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(vis[x]) <span class="keyword">return</span>;</span><br><span class="line">que.push(x); vis[x] = <span class="number">1</span>; Del(x);</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(!que.empty()) &#123;</span><br><span class="line"><span class="keyword">int</span> now = que.front(); que.pop();</span><br><span class="line"><span class="keyword">int</span> ed = Last[now];</span><br><span class="line"><span class="keyword">while</span>(ed != <span class="number">-1</span>) &#123;</span><br><span class="line"><span class="keyword">int</span> dr = other[ed];</span><br><span class="line"><span class="keyword">if</span>(!vis[dr]) co[dr] = <span class="number">1</span>;</span><br><span class="line">ed = pre[ed];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = nxt[<span class="number">0</span>]; j; j = nxt[j])&#123;</span><br><span class="line"><span class="keyword">if</span>(!co[j]) &#123;</span><br><span class="line">count++;</span><br><span class="line">Del(j);</span><br><span class="line">vis[j] = <span class="number">1</span>;</span><br><span class="line">que.push(j);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> co[j] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">seq[++tot] = count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%d%d"</span>, &amp;n, &amp;m);</span><br><span class="line"><span class="built_in">memset</span>(Last, <span class="number">-1</span>, <span class="keyword">sizeof</span>(Last));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++) nxt[i] = i + <span class="number">1</span>, last[i + <span class="number">1</span>] = i;</span><br><span class="line">nxt[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> u, v;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">u = read(); v = read();</span><br><span class="line">Add(u, v); Add(v, u);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">Bfs(i);</span><br><span class="line">&#125;</span><br><span class="line">sort (seq + <span class="number">1</span>, seq + tot + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, tot);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= tot; i++) &#123;</span><br><span class="line"><span class="keyword">if</span>(i != tot) <span class="built_in">printf</span>(<span class="string">"%d "</span>, seq[i]);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, seq[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目大意：&lt;/p&gt;
&lt;p&gt;​    有个公司有$n$个员工，$m$个关系表示$A$ 和 $B$ 彼此有电话号码，现在公司想把这些员工分到尽可能多的地方，而且要每个地方的员工都能与其他位置的员工保持联系所以他们必须有彼此的电话号，问最多能分到几个位置，每个位置多少人。 $(n
      
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
    
      <category term="Bfs+链表" scheme="http://yoursite.com/tags/Bfs-%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>男人8题A</title>
    <link href="http://yoursite.com/2018/03/28/%E7%94%B7%E4%BA%BA8%E9%A2%98A/"/>
    <id>http://yoursite.com/2018/03/28/男人8题A/</id>
    <published>2018-03-28T14:32:19.000Z</published>
    <updated>2018-03-28T15:20:01.154Z</updated>
    
    <content type="html"><![CDATA[<p>题目大意：</p><p>​    $Alice$和$Bob$两个人在玩游戏，有一个母串$t$ 和 $n$个子串，$Alice $ 和$Bod$ 轮流进行操作， $Alice$先手：</p><p>每次操作从$n$个子串中挑选一个出来，在串的尾部添加一个字母，前提是添加后的串依然是母串的子串。</p><p>谁无法操作就输掉游戏，问谁会赢。（两人都采用最有策略）</p><p>解题思路:</p><p>​    这道题每次往串的尾部加字母，由于比赛之前正好在学$SAM$，就感觉与他有关，但是想了好久也没和此题联系起来，最后就没想了，就去打$At$ 了。 比赛结束后在群里问了一下此题做法，一个大佬就给我讲解了一下，大概就是把母串跑一下$SAM$， 然后会跑出一个$DAG$， 那么就像博弈树那样，从最下面往上做$SG$函数，处理每个节点的$SG$值，在从根跑每个子串，找到每个子串对应节点， 将他们的$SG$值异或起来就可以了。</p><p>代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">include &lt;cstdio&gt;</span><br><span class="line">include &lt;cstring&gt;</span><br><span class="line">include &lt;algorithm&gt;</span><br><span class="line">include &lt;cmath&gt;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MaxN = <span class="number">2e5</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> netMaxN * <span class="number">2</span> + <span class="number">5</span>, last, cnt;</span><br><span class="line"><span class="keyword">int</span> fa[MaxN * <span class="number">2</span> + <span class="number">5</span>], len[MaxN + <span class="number">5</span>], sg[MaxN + <span class="number">5</span>], mex[<span class="number">30</span>];</span><br><span class="line"><span class="keyword">int</span> v[MaxN * <span class="number">2</span> + <span class="number">5</span>], q[MaxN * <span class="number">2</span> + <span class="number">5</span>];</span><br><span class="line"><span class="keyword">char</span> s[MaxN + <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">int</span> x)</span> </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> p = last ; last = ++cnt;</span><br><span class="line"><span class="keyword">int</span> np = cnt; len[np] = len[p] + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(!netp &amp;&amp; p) netp = np, p = fa[p];</span><br><span class="line"><span class="keyword">if</span>(!p) fa[np] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">int</span> q = netp; </span><br><span class="line"><span class="keyword">if</span>(len[p] + <span class="number">1</span> == len[q]) fa[np] = q;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">int</span> nq = ++cnt; len[nq] = len[p] + <span class="number">1</span>;</span><br><span class="line"><span class="built_in">memcpy</span>(net[nq], net[q], <span class="keyword">sizeof</span>(net[q]));</span><br><span class="line">fa[nq] = fa[q];</span><br><span class="line">fa[np] = fa[q] = nq;</span><br><span class="line"><span class="keyword">while</span>(netp == q) netp = nq, p = fa[p];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">(<span class="keyword">int</span> t)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= t; i++) v[i] = <span class="number">0</span>, sg[i] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= t; i++) v[len[i]]++;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= t; i++) v[i] += v[i - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = t; i &gt;= <span class="number">1</span>; i--) q[v[len[i]]--] = i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = t; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">27</span>; j++) mex[j] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> now = q[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">25</span>; j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(netnow) &#123;</span><br><span class="line">mex[sg[netnow]] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(mex[sg[now]]) sg[now]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Solve</span><span class="params">(<span class="keyword">char</span> s[])</span> </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> len = <span class="built_in">strlen</span>(s);</span><br><span class="line"><span class="keyword">int</span> now = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> x = s[i] - <span class="string">'a'</span>;</span><br><span class="line">now = netnow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sg[now];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%s"</span>, s)) &#123;</span><br><span class="line">last = <span class="number">1</span>, cnt = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> len = <span class="built_in">strlen</span>(s);</span><br><span class="line"><span class="built_in">memset</span>(net, <span class="number">0</span>, <span class="keyword">sizeof</span>(net));</span><br><span class="line"><span class="built_in">memset</span>(fa, <span class="number">0</span>, <span class="keyword">sizeof</span>(fa));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) Insert(s[i] - <span class="string">'a'</span>);</span><br><span class="line">Init(cnt);</span><br><span class="line"><span class="keyword">int</span> n; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</span><br><span class="line">res = res ^ Solve(s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(res != <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"Alice\n"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"Bob\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目大意：&lt;/p&gt;
&lt;p&gt;​    $Alice$和$Bob$两个人在玩游戏，有一个母串$t$ 和 $n$个子串，$Alice $ 和$Bod$ 轮流进行操作， $Alice$先手：&lt;/p&gt;
&lt;p&gt;每次操作从$n$个子串中挑选一个出来，在串的尾部添加一个字母，前提是添加后的
      
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
    
      <category term="SAM,SG" scheme="http://yoursite.com/tags/SAM-SG/"/>
    
  </entry>
  
</feed>
