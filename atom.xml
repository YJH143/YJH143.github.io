<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>New_Wrold</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-03-28T14:59:00.610Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>YJH143</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>男人8题A</title>
    <link href="http://yoursite.com/2018/03/28/%E7%94%B7%E4%BA%BA8%E9%A2%98A/"/>
    <id>http://yoursite.com/2018/03/28/男人8题A/</id>
    <published>2018-03-28T14:32:19.000Z</published>
    <updated>2018-03-28T14:59:00.610Z</updated>
    
    <content type="html"><![CDATA[<p>题目大意：</p><p>​    $Alice$和$Bob$两个人在玩游戏，有一个母串$t$ 和 $n$个子串，$Alice $ 和$Bod$ 轮流进行操作， $Alice$先手：</p><p>每次操作从$n$个子串中挑选一个出来，在串的尾部添加一个字母，前提是添加后的串依然是母串的子串。</p><p>谁无法操作就输掉游戏，问谁会赢。（两人都采用最有策略）</p><p>解题思路:</p><p>​    这道题每次往串的尾部加字母，由于比赛之前正好在学$SAM$，就感觉与他有关，但是想了好久也没和此题联系起来，最后就没想了，就去打$At$ 了。 比赛结束后在群里问了一下此题做法，一个大佬就给我讲解了一下，大概就是把母串跑一下$SAM$， 然后会跑出一个$DAG$， 那么就像博弈树那样，从最下面往上做$SG$函数，处理每个节点的$SG$值，在从根跑每个子串，找到每个子串对应节点， 将他们的$SG$值异或起来就可以了。</p><p>代码：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">include &lt;cstdio&gt;</span><br><span class="line">include &lt;cstring&gt;</span><br><span class="line">include &lt;algorithm&gt;</span><br><span class="line">include &lt;cmath&gt;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> MaxN = <span class="number">2e5</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> netMaxN * <span class="number">2</span> + <span class="number">5</span>, last, cnt;</span><br><span class="line"><span class="keyword">int</span> fa[MaxN * <span class="number">2</span> + <span class="number">5</span>], len[MaxN + <span class="number">5</span>], sg[MaxN + <span class="number">5</span>], mex[<span class="number">30</span>];</span><br><span class="line"><span class="keyword">int</span> v[MaxN * <span class="number">2</span> + <span class="number">5</span>], q[MaxN * <span class="number">2</span> + <span class="number">5</span>];</span><br><span class="line"><span class="keyword">char</span> s[MaxN + <span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert</span><span class="params">(<span class="keyword">int</span> x)</span> </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> p = last ; last = ++cnt;</span><br><span class="line"><span class="keyword">int</span> np = cnt; len[np] = len[p] + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(!netp &amp;&amp; p) netp = np, p = fa[p];</span><br><span class="line"><span class="keyword">if</span>(!p) fa[np] = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">int</span> q = netp; </span><br><span class="line"><span class="keyword">if</span>(len[p] + <span class="number">1</span> == len[q]) fa[np] = q;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">int</span> nq = ++cnt; len[nq] = len[p] + <span class="number">1</span>;</span><br><span class="line"><span class="built_in">memcpy</span>(net[nq], net[q], <span class="keyword">sizeof</span>(net[q]));</span><br><span class="line">fa[nq] = fa[q];</span><br><span class="line">fa[np] = fa[q] = nq;</span><br><span class="line"><span class="keyword">while</span>(netp == q) netp = nq, p = fa[p];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Init</span><span class="params">(<span class="keyword">int</span> t)</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= t; i++) v[i] = <span class="number">0</span>, sg[i] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= t; i++) v[len[i]]++;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= t; i++) v[i] += v[i - <span class="number">1</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = t; i &gt;= <span class="number">1</span>; i--) q[v[len[i]]--] = i;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = t; i &gt;= <span class="number">1</span>; i--) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">27</span>; j++) mex[j] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> now = q[i];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= <span class="number">25</span>; j++) &#123;</span><br><span class="line"><span class="keyword">if</span>(netnow) &#123;</span><br><span class="line">mex[sg[netnow]] = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(mex[sg[now]]) sg[now]++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Solve</span><span class="params">(<span class="keyword">char</span> s[])</span> </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> len = <span class="built_in">strlen</span>(s);</span><br><span class="line"><span class="keyword">int</span> now = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line"><span class="keyword">int</span> x = s[i] - <span class="string">'a'</span>;</span><br><span class="line">now = netnow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> sg[now];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">while</span>(~<span class="built_in">scanf</span>(<span class="string">"%s"</span>, s)) &#123;</span><br><span class="line">last = <span class="number">1</span>, cnt = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> len = <span class="built_in">strlen</span>(s);</span><br><span class="line"><span class="built_in">memset</span>(net, <span class="number">0</span>, <span class="keyword">sizeof</span>(net));</span><br><span class="line"><span class="built_in">memset</span>(fa, <span class="number">0</span>, <span class="keyword">sizeof</span>(fa));</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) Insert(s[i] - <span class="string">'a'</span>);</span><br><span class="line">Init(cnt);</span><br><span class="line"><span class="keyword">int</span> n; <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;n);</span><br><span class="line"><span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>, s);</span><br><span class="line">res = res ^ Solve(s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(res != <span class="number">0</span>) <span class="built_in">printf</span>(<span class="string">"Alice\n"</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">printf</span>(<span class="string">"Bob\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目大意：&lt;/p&gt;
&lt;p&gt;​    $Alice$和$Bob$两个人在玩游戏，有一个母串$t$ 和 $n$个子串，$Alice $ 和$Bod$ 轮流进行操作， $Alice$先手：&lt;/p&gt;
&lt;p&gt;每次操作从$n$个子串中挑选一个出来，在串的尾部添加一个字母，前提是添加后的
      
    
    </summary>
    
      <category term="ACM" scheme="http://yoursite.com/categories/ACM/"/>
    
    
      <category term="SAM,SG" scheme="http://yoursite.com/tags/SAM-SG/"/>
    
  </entry>
  
  <entry>
    <title>he</title>
    <link href="http://yoursite.com/2018/03/19/he/"/>
    <id>http://yoursite.com/2018/03/19/he/</id>
    <published>2018-03-19T01:53:09.000Z</published>
    <updated>2018-03-20T05:15:59.702Z</updated>
    
    <content type="html"><![CDATA[<p>大家好</p><p>谢谢。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;大家好&lt;/p&gt;
&lt;p&gt;谢谢。&lt;/p&gt;

      
    
    </summary>
    
    
      <category term="测试" scheme="http://yoursite.com/tags/%E6%B5%8B%E8%AF%95/"/>
    
  </entry>
  
</feed>
